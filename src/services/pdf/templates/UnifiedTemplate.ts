import jsPDF from 'jspdf';
import { PdfTemplate, PdfGenerationOptions } from '../types';
import { AIReportTemplate } from './AIReportTemplate';
import { AstroTemplate } from './AstroTemplate';
import { isSynastryData } from '@/lib/synastryFormatter';

export interface UnifiedPdfData {
  reportContent?: string;
  swissData?: any;
  customerName: string;
  reportPdfData?: string;
  reportType?: string;
}

export class UnifiedTemplate implements PdfTemplate {
  private options: PdfGenerationOptions;
  private aiTemplate: AIReportTemplate;
  private astroTemplate: AstroTemplate;

  constructor(options?: PdfGenerationOptions) {
    this.options = {
      format: 'a4',
      orientation: 'portrait',
      margins: { top: 20, right: 20, bottom: 20, left: 20 },
      includeHeader: true,
      includeFooter: true,
      ...options
    };
    this.aiTemplate = new AIReportTemplate(this.options);
    this.astroTemplate = new AstroTemplate(this.options);
  }

  async generate(data: UnifiedPdfData, options?: PdfGenerationOptions): Promise<void> {
    const doc = new jsPDF({
      orientation: this.options.orientation,
      unit: 'mm',
      format: this.options.format
    });

    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margins = this.options.margins!;
    
    let currentY = margins.top;

    // Header
    if (this.options.includeHeader) {
      currentY = this.addHeader(doc, data.customerName, currentY, pageWidth, margins, data.reportType);
    }

    // AI Report Section (Priority - Front and Center)
    if (data.reportContent) {
      currentY = this.aiTemplate.renderAIReportSection(data.reportContent, currentY, doc);
    }

    // Astro Data Section - Use the proper AstroTemplate methods
    if (data.swissData) {
      currentY = this.renderAstroSection(doc, data.swissData, currentY);
    }

    // Footer
    if (this.options.includeFooter) {
      this.addFooter(doc, pageWidth, pageHeight);
    }

    // Download the PDF with exact customer name as passed
    const filename = `${data.customerName.replace(/\s+/g, '_')}_Complete_Report.pdf`;
    doc.save(filename);
  }

  private addHeader(doc: jsPDF, customerName: string, startY: number, pageWidth: number, margins: any, reportType?: string): number {
    doc.setFontSize(26).setFont("times", "bold").text("Therai.", pageWidth/2, startY + 12, { align: "center" });
    
    // Use report type for title if available, otherwise fallback to generic
    const reportTitle = this.getReportTitle(reportType);
    doc.setFontSize(20).setFont("helvetica", "bold").text(reportTitle, pageWidth/2, startY + 28, { align: "center" });
    
    doc.setFontSize(12).setFont("helvetica", "normal").setTextColor(100);
    // Use customerName directly as passed - no re-inference or modification
    doc.text(`Generated for: ${customerName}`, margins.left, startY + 45);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, margins.left, startY + 55);
    
    return startY + 70;
  }

  private renderAstroSection(doc: jsPDF, swissData: any, startY: number): number {
    // Check if we need a new page
    const pageHeight = doc.internal.pageSize.getHeight();
    const margins = this.options.margins!;
    
    if (startY > pageHeight - 100) {
      doc.addPage();
      startY = margins.top;
    }

    // Section Header
    doc.setFontSize(18).setFont("helvetica", "bold").setTextColor(75, 63, 114);
    doc.text("Astrological Data", margins.left, startY);
    startY += 15;

    // Use the proper AstroTemplate rendering methods
    try {
      if (isSynastryData(swissData)) {
        return this.astroTemplate.renderSynastryData(swissData, startY, doc);
      } else {
        return this.astroTemplate.renderEssenceData(swissData, startY, doc);
      }
    } catch (error) {
      console.error('Error rendering astro data:', error);
      
      // Fallback: show basic info
      doc.setFontSize(11).setFont("helvetica", "normal").setTextColor(33);
      doc.text("Astrological data is available but could not be properly formatted.", margins.left, startY);
      return startY + 20;
    }
  }

  private addFooter(doc: jsPDF, pageWidth: number, pageHeight: number): void {
    doc.setFontSize(9).setFont("helvetica", "italic").setTextColor(120);
    doc.text("Generated by TheraI - www.theraiastro.com", pageWidth/2, pageHeight - 15, { align: "center" });
  }

  private getReportTitle(reportType?: string): string {
    if (!reportType) return "Complete Intelligence Report";
    
    const reportTitles: Record<string, string> = {
      'essence': 'Astro Data',
      'sync': 'Compatibility', 
      'focus': 'Focus',
      'flow': 'Professional',
      'mindset': 'The Self Personal',
      'monthly': 'Relational'
    };
    
    return reportTitles[reportType.toLowerCase()] || "Complete Intelligence Report";
  }
}