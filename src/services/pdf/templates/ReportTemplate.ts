import { BaseTemplate } from './BaseTemplate';
import { ReportPdfData, PdfGenerationOptions, PdfMetadata } from '../types';

export class ReportTemplate extends BaseTemplate {
  async generate(data: ReportPdfData, options: PdfGenerationOptions = {}): Promise<void> {
    const metadata: PdfMetadata = {
      title: 'Essence Professional',
      subject: 'Client Energetic Insight',
      author: 'Theria Astro',
      keywords: ['astrology', 'psychology', 'client profile']
    };
    this.setMetadata(metadata);

    // Fetch and embed logo
    const fetchImageAsBase64 = async (url: string): Promise<string> => {
      const response = await fetch(url);
      const blob = await response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result as string);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    };

    const logo = await fetchImageAsBase64('https://auth.theraiastro.com/storage/v1/object/public/therai-assets//therai-logo.png');
    const logoWidth = 40;
    const logoAspect = 350 / 200; // estimated logo aspect ratio (adjust if needed)
    const logoHeight = logoWidth / logoAspect;
    const logoY = 20;

    this.doc.addImage(logo, 'PNG', this.margins.left, logoY, 40, 40); 

    // Title
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(40, 40, 60);
    this.doc.text('Essence Professional', this.pageWidth / 2, logoY + 12, { align: 'center' });

    // Metadata
    let y = logoY + logoHeight + 12;
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(100);

    this.doc.text('Report ID:', this.margins.left, y);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(data.id.substring(0, 8), this.margins.left + 40, y);

    this.doc.setFont('helvetica', 'normal');
    y += 6;
    this.doc.text('Generated At:', this.margins.left, y);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(data.metadata.generatedAt, this.margins.left + 40, y);

    // Error Handling
    if (data.error) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(200, 0, 0);
      this.doc.text('Error:', this.margins.left, y + 10);

      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(0, 0, 0);
      const errorLines = this.doc.splitTextToSize(data.error, this.pageWidth - this.margins.left - this.margins.right);
      this.doc.text(errorLines, this.margins.left, y + 17);
      return;
    }

    // Section Header
    y += 18;
    this.doc.setFontSize(13);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(75, 63, 114);
    this.doc.text('Client Energetic Insight', this.margins.left, y);

    // Content (cleaned and auto-paginated)
    const contentText = data.content.replace(/\*\*(.*?)\*\*/g, '$1').replace(/[_`]/g, '');
    const contentLines = this.doc.splitTextToSize(
      contentText,
      this.pageWidth - this.margins.left - this.margins.right
    );

    this.doc.setFont('times', 'normal');
    this.doc.setFontSize(11);
    this.doc.setTextColor(33);

    let lineY = y + 10;
    const bottomPadding = 20;
    const lineHeight = 6;

    for (const line of contentLines) {
      if (lineY + lineHeight > this.pageHeight - bottomPadding) {
        this.doc.addPage();
        lineY = this.margins.top;
      }
      this.doc.text(line, this.margins.left, lineY);
      lineY += lineHeight;
    }

    // Footer
    if (options.includeFooter !== false && lineY + 15 < this.pageHeight) {
      this.doc.setFontSize(9);
      this.doc.setFont('helvetica', 'italic');
      this.doc.setTextColor(120);
      this.doc.text(
        `Generated by Theria Astro Â· ${new Date().toLocaleDateString()}`,
        this.pageWidth / 2,
        this.pageHeight - 15,
        { align: 'center' }
      );
    }

    // Save
    const filename = `report-${data.id.substring(0, 8)}-${new Date().toISOString().split('T')[0]}.pdf`;
    this.download(filename);
  }
}
