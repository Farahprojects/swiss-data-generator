import { BaseTemplate } from './BaseTemplate';
import { ReportPdfData, PdfGenerationOptions, PdfMetadata } from '../types';

export class ReportTemplate extends BaseTemplate {
  async generate(data: ReportPdfData, options: PdfGenerationOptions = {}): Promise<void> {
    // Set PDF metadata
    const metadata: PdfMetadata = {
      title: data.title,
      subject: 'Client Report',
      author: 'Theria Astro',
      keywords: ['report', data.metadata.reportType].filter(Boolean)
    };
    this.setMetadata(metadata);

    // Fetch and embed logo from Supabase
    const fetchImageAsBase64 = async (url: string): Promise<string> => {
      const response = await fetch(url);
      const blob = await response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result as string);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    };

    const logo = await fetchImageAsBase64('https://auth.theraiastro.com/storage/v1/object/public/therai-assets//therai-logo.png');
    this.doc.addImage(logo, 'PNG', this.margins.left, 20, 40, 20);

    // Add title
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(40, 40, 60);
    this.doc.text(data.title, this.pageWidth / 2, 50, { align: 'center' });

    // Add metadata (clean and minimal)
    const metadataForPdf: Record<string, string> = {
      'Report ID': data.id.substring(0, 8),
      'Generated At': data.metadata.generatedAt,
      'Report Type': data.metadata.reportType || 'N/A'
    };

    let y = 65;
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(100);

    for (const [key, value] of Object.entries(metadataForPdf)) {
      this.doc.text(`${key}:`, this.margins.left, y);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text(`${value}`, this.margins.left + 40, y);
      this.doc.setFont('helvetica', 'normal');
      y += 6;
    }

    // Stop early if error is present
    if (data.error) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(200, 0, 0);
      this.doc.text('Error:', this.margins.left, y + 10);

      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(0, 0, 0);
      const errorLines = this.doc.splitTextToSize(data.error, this.pageWidth - this.margins.left - this.margins.right);
      this.doc.text(errorLines, this.margins.left, y + 17);
      return;
    }

    // Add section heading
    this.doc.setFontSize(13);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(75, 63, 114);
    this.doc.text('Energetic Insight & Client Profile', this.margins.left, y + 10);

    // Add report content
    this.doc.setFont('times', 'normal');
    this.doc.setFontSize(11);
    this.doc.setTextColor(33);

    const contentLines = this.doc.splitTextToSize(
      data.content,
      this.pageWidth - this.margins.left - this.margins.right
    );
    this.doc.text(contentLines, this.margins.left, y + 20);

    // Add footer
    if (options.includeFooter !== false) {
      this.doc.setFontSize(9);
      this.doc.setFont('helvetica', 'italic');
      this.doc.setTextColor(120);
      this.doc.text(
        `Generated by Theria Astro Â· ${new Date().toLocaleDateString()}`,
        this.pageWidth / 2,
        this.pageHeight - 15,
        { align: 'center' }
      );
    }

    // Download the PDF
    const filename = `report-${data.id.substring(0, 8)}-${new Date().toISOString().split('T')[0]}.pdf`;
    this.download(filename);
  }
}
