
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    
    /* Dynamic viewport height - initialized by JS */
    --vh: 1vh;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Enhanced mobile viewport height utilities using --vh custom property */
.h-screen-safe {
  height: calc(var(--vh, 1vh) * 100);
}

.min-h-screen-safe {
  min-height: calc(var(--vh, 1vh) * 100);
}

.max-h-screen-safe {
  max-height: calc(var(--vh, 1vh) * 100);
}

/* Mobile keyboard and scroll fixes with keyboard inset support */
.keyboard-visible {
  /* Enhanced keyboard handling - prevent content shifts */
  overscroll-behavior: none;
  touch-action: manipulation;
  /* Support for keyboard inset height on supporting browsers */
  padding-bottom: env(keyboard-inset-height, 0px);
}

/* Prevent zoom on input focus for iOS */
input[type="text"],
input[type="email"],
input[type="date"],
input[type="time"],
textarea,
select {
  font-size: 16px !important;
  transform-origin: left top;
  transition: none;
}

/* Google Maps autocomplete mobile fixes - Enhanced isolation */
.mobile-autocomplete-container {
  position: relative;
  isolation: isolate;
  contain: layout style;
}

/* New isolated mobile autocomplete for complete containment */
.mobile-autocomplete-isolated {
  position: relative;
  isolation: isolate;
  contain: layout style size;
  transform: translateZ(0); /* Force new stacking context */
  will-change: auto;
}

/* Ensure Google autocomplete popup doesn't interfere with drawer */
@media (max-width: 768px) {
  /* Enhanced Google Maps autocomplete popup styling */
  gmp-place-autocomplete {
    font-size: 16px !important;
    border: none !important;
    outline: none !important;
    background: transparent !important;
    position: relative !important;
    z-index: 1 !important;
  }
  
  /* Prevent Google popup from causing layout shifts - Enhanced */
  .mobile-autocomplete-container::after,
  .mobile-autocomplete-isolated::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: -1;
    background: transparent;
  }
  
  /* Stabilize autocomplete container with strict containment */
  .mobile-autocomplete-container,
  .mobile-autocomplete-isolated {
    height: 48px !important;
    min-height: 48px !important;
    max-height: 48px !important;
    overflow: hidden !important;
    transform: translateZ(0);
  }
  
  /* Isolate Google Maps popup from drawer context */
  .mobile-autocomplete-isolated gmp-place-autocomplete {
    contain: layout style;
    transform: translateZ(0);
  }
  
  /* Prevent Google popup from affecting drawer scroll */
  .mobile-autocomplete-isolated {
    overscroll-behavior: contain;
    scroll-behavior: auto;
  }
  
  /* Force Google autocomplete to respect container boundaries */
  .mobile-autocomplete-isolated * {
    max-width: 100% !important;
    overflow: hidden !important;
  }
}

/* Enhanced mobile layout stability using --vh */
html {
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
  /* Prevent elastic scrolling on iOS */
  -webkit-overflow-scrolling: touch;
  overscroll-behavior-y: none;
}

/* Mobile input focus improvements with keyboard inset support */
@media (max-width: 768px) {
  /* Prevent layout shifts on focus */
  input:focus,
  textarea:focus {
    transform: none;
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }
  
  /* Ensure natural document flow */
  .mobile-form-container {
    position: relative;
    width: 100%;
    height: auto;
    overflow: visible;
  }
  
  /* Enhanced drawer stability during autocomplete with --vh support */
  [data-vaul-drawer-wrapper] {
    transform: translateZ(0);
    contain: layout;
    height: calc(var(--vh, 1vh) * 100);
  }
  
  /* Prevent Google Maps from interfering with drawer positioning */
  [data-vaul-drawer] {
    isolation: isolate;
    contain: layout style;
    height: calc(var(--vh, 1vh) * 100);
    max-height: calc(var(--vh, 1vh) * 100);
  }
}

/* Context-specific scroll management for drawer states only */
.drawer-scroll-lock {
  position: fixed !important;
  width: 100% !important;
  height: calc(var(--vh, 1vh) * 100) !important;
  overflow: hidden !important;
}

.drawer-scroll-lock #root {
  height: calc(var(--vh, 1vh) * 100) !important;
  max-height: calc(var(--vh, 1vh) * 100) !important;
  overflow: hidden !important;
}

/* Additional keyboard inset height support for modern browsers */
@supports (height: env(keyboard-inset-height)) {
  .keyboard-visible {
    height: calc(calc(var(--vh, 1vh) * 100) - env(keyboard-inset-height, 0px));
    max-height: calc(calc(var(--vh, 1vh) * 100) - env(keyboard-inset-height, 0px));
  }
}
