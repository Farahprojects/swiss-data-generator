import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: corsHeaders
    });
  }

  const requestId = crypto.randomUUID().substring(0, 8);
  const log = (...args) => console.log(`[VERIFY-EMAIL:${requestId}]`, ...args);

  // Log request details
  log("Request received:", {
    method: req.method,
    url: req.url,
    headers: Object.fromEntries(req.headers.entries())
  });

  // JWT verification disabled in config.toml
  // No authorization check needed
  try {
    const { token, email, type } = await req.json();
    log("Verification request:", {
      hasToken: !!token,
      hasEmail: !!email,
      type,
      tokenLength: token?.length
    });

    if (!token || !email || !type) {
      log("Missing required parameters");
      return new Response(JSON.stringify({
        success: false,
        error: "Missing token, email, or type"
      }), {
        status: 400,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

    const supabaseUrl = Deno.env.get('VITE_SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');

    if (!supabaseUrl || !supabaseAnonKey) {
      log("Missing Supabase credentials");
      return new Response(JSON.stringify({
        success: false,
        error: "Server configuration error"
      }), {
        status: 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // Use Supabase's built-in verification API with anon key
    log("Verifying token with Supabase auth API...");

    // For tokens generated by generateLink(), we need to verify them using the auth API
    // The token from generateLink() is a magic link token that can be verified directly
    try {
      // Use the verifyOtp method to verify the token
      const { data: verifyData, error: verifyError } = await supabase.auth.verifyOtp({
        token_hash: token,
        type: type as any
      });

      if (verifyError) {
        log("Token verification failed:", verifyError.message);
        return new Response(JSON.stringify({
          success: false,
          error: "Invalid or expired verification token"
        }), {
          status: 400,
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        });
      }

      if (!verifyData.user) {
        log("No user returned from verification");
        return new Response(JSON.stringify({
          success: false,
          error: "Verification failed - no user found"
        }), {
          status: 400,
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        });
      }

      log("âœ… Email verification successful via Supabase:", {
        userId: verifyData.user.id,
        email: verifyData.user.email,
        emailConfirmed: verifyData.user.email_confirmed_at
      });

      return new Response(JSON.stringify({
        success: true,
        message: "Email verified successfully",
        userId: verifyData.user.id,
        email: verifyData.user.email
      }), {
        status: 200,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });

    } catch (verifyErr) {
      log("Verification error:", verifyErr);
      return new Response(JSON.stringify({
        success: false,
        error: "Token verification failed"
      }), {
        status: 400,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

  } catch (error) {
    log("Unexpected error:", error);
    return new Response(JSON.stringify({
      success: false,
      error: "Internal server error"
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
});
