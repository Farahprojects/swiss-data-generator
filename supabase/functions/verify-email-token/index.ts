import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: corsHeaders
    });
  }

  const requestId = crypto.randomUUID().substring(0, 8);
  const log = (...args) => console.log(`[VERIFY-EMAIL:${requestId}]`, ...args);

  // Log request details
  log("üöÄ Edge function started");
  log("üìã Request received:", {
    method: req.method,
    url: req.url,
    headers: Object.fromEntries(req.headers.entries()),
    hasAuthorization: req.headers.has('authorization'),
    authorization: req.headers.get('authorization')?.substring(0, 20) + "..."
  });

  // JWT verification disabled in config.toml
  // No authorization check needed
  try {
    const { token, email, type } = await req.json();
    log("Verification request:", {
      hasToken: !!token,
      hasEmail: !!email,
      type,
      tokenLength: token?.length
    });

    if (!token || !email || !type) {
      log("Missing required parameters");
      return new Response(JSON.stringify({
        success: false,
        error: "Missing token, email, or type"
      }), {
        status: 400,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

    const supabaseUrl = Deno.env.get('VITE_SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('VITE_SUPABASE_ANON_KEY');

    log("üîß Environment variables:", {
      hasSupabaseUrl: !!supabaseUrl,
      hasSupabaseAnonKey: !!supabaseAnonKey,
      supabaseUrl: supabaseUrl ? supabaseUrl.substring(0, 30) + "..." : "MISSING",
      supabaseAnonKey: supabaseAnonKey ? "PRESENT" : "MISSING"
    });

    if (!supabaseUrl || !supabaseAnonKey) {
      log("‚ùå Missing Supabase credentials");
      return new Response(JSON.stringify({
        success: false,
        error: "Server configuration error - missing environment variables"
      }), {
        status: 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

    log("‚úÖ Environment variables loaded successfully");
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    log("‚úÖ Supabase client created");

    // Use Supabase's built-in verification API with anon key
    log("üîê Calling Supabase verifyOtp API...");

    // For tokens generated by generateLink(), we need to verify them using the auth API
    // The token from generateLink() is a magic link token that can be verified directly
    try {
      log("üì§ verifyOtp request parameters:", {
        tokenHashLength: token.length,
        type: type,
        email: email
      });

      // Use the same type for verification as was used for generation
      // generateLink({ type: "signup" }) creates tokens that need verifyOtp({ type: "signup" })
      const supabaseVerifyType = type;
      
      log("üîÑ Type mapping:", {
        originalType: type,
        mappedType: supabaseVerifyType
      });
      
      // Use the verifyOtp method to verify the token
      log("üîê Calling verifyOtp with:", {
        email: email,
        token: token.substring(0, 10) + "...",
        type: supabaseVerifyType
      });

      const { data: verifyData, error: verifyError } = await supabase.auth.verifyOtp({
        email: email,
        token: token,
        type: supabaseVerifyType as any
      });

      log("üì• verifyOtp response:", {
        hasData: !!verifyData,
        hasError: !!verifyError,
        data: verifyData ? {
          hasUser: !!verifyData.user,
          hasSession: !!verifyData.session,
          userId: verifyData.user?.id,
          userEmail: verifyData.user?.email,
          emailConfirmed: verifyData.user?.email_confirmed_at
        } : null
        error: verifyError ? {
          message: verifyError.message,
          status: verifyError.status,
          code: verifyError.code,
          details: verifyError.details
        } : null
      });

      if (verifyError) {
        log("‚ùå Token verification failed:", {
          message: verifyError.message,
          status: verifyError.status,
          code: verifyError.code,
          details: verifyError.details,
          fullError: verifyError
        });
        return new Response(JSON.stringify({
          success: false,
          error: "Invalid or expired verification token",
          details: verifyError.message
        }), {
          status: 400,
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        });
      }

      if (!verifyData.user) {
        log("No user returned from verification");
        return new Response(JSON.stringify({
          success: false,
          error: "Verification failed - no user found"
        }), {
          status: 400,
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        });
      }

      log("‚úÖ Email verification successful via Supabase:", {
        userId: verifyData.user.id,
        email: verifyData.user.email,
        emailConfirmed: verifyData.user.email_confirmed_at
      });

      return new Response(JSON.stringify({
        success: true,
        message: "Email verified successfully",
        userId: verifyData.user.id,
        email: verifyData.user.email
      }), {
        status: 200,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });

    } catch (verifyErr) {
      log("üí• Verification error caught:", {
        error: verifyErr,
        message: verifyErr instanceof Error ? verifyErr.message : verifyErr,
        stack: verifyErr instanceof Error ? verifyErr.stack : undefined,
        name: verifyErr instanceof Error ? verifyErr.name : typeof verifyErr
      });

      // Check for specific 401/403 errors
      if (verifyErr instanceof Error && verifyErr.message.includes('401')) {
        log("üö® 401 Unauthorized error detected - check Supabase credentials and permissions");
      }

      return new Response(JSON.stringify({
        success: false,
        error: "Token verification failed",
        details: verifyErr instanceof Error ? verifyErr.message : 'Unknown error'
      }), {
        status: 400,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }

  } catch (error) {
    log("üí• Unexpected error in main try-catch:", {
      error: error,
      message: error instanceof Error ? error.message : error,
      stack: error instanceof Error ? error.stack : undefined,
      name: error instanceof Error ? error.name : typeof error
    });

    return new Response(JSON.stringify({
      success: false,
      error: "Internal server error",
      details: error instanceof Error ? error.message : 'Unknown error'
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
});
